name: api
version: 0.1.0.0
github: "githubuser/api"
license: BSD3
author: "Author name here"
maintainer: "example@example.com"
copyright: "2020 Author name here"

extra-source-files:
  - README.md
  - ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description: Please see the README on GitHub at <https://github.com/jeremyjousse/api#readme>

dependencies:
  - aeson
  - base
  - http-api-data
  - http-client
  - http-client-tls
  - http-types
  - monad-logger
  - transformers
  - path-pieces
  - persistent
  - persistent-postgresql
  - persistent-template
  - servant
  - servant-client
  - servant-client-core
  - servant-server
  - template-haskell
  - text
  - warp

default-extensions:
  - BangPatterns
  - BinaryLiterals
  - BlockArguments
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveTraversable
  - DoAndIfThenElse
  - DuplicateRecordFields
  - EmptyDataDecls
  - ExistentialQuantification
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - GeneralizedNewtypeDeriving
  - InstanceSigs
  - KindSignatures
  - LambdaCase
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - OverloadedLists
  - OverloadedStrings
  - PartialTypeSignatures
  - PatternGuards
  - PolyKinds
  - QuasiQuotes
  - RankNTypes
  - RecordWildCards
  - ScopedTypeVariables
  - StandaloneDeriving
  - TemplateHaskell
  - TupleSections
  - TypeApplications
  - TypeFamilies
  - TypeOperators
  - TypeSynonymInstances
  - ViewPatterns
  - StrictData

library:
  source-dirs: src

executables:
  api-exe:
    main: Main.hs
    source-dirs: app
    ghc-options:
      - -threaded
      - -rtsopts
      - -with-rtsopts=-N
    dependencies:
      - api

tests:
  api-test:
    main: Spec.hs
    source-dirs: test
    ghc-options:
      - -threaded
      - -rtsopts
      - -with-rtsopts=-N
    dependencies:
      - api
      - aeson-qq # To get Json as raw string
      # - hedgehog # Property based testing but harder than quick-check
      # - tasty-hedgehog
      - hspec-expectations-pretty-diff # Pretty print differences in case of test failure, useful for big structures comparison
      - HUnit # Unit testing
      - tasty # Test aggregation and discovery
      - tasty-hspec # Unit testing <- pretty print input output on error cases
      - tasty-hunit # Unit testing <- easy to use
      - tasty-discover
      - tasty-quickcheck
      - QuickCheck
